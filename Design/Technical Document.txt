Registers
~~~~~~~~~
	acc	Accumulator, the base for all math operations
	rand	Random number generator
	zf	Zero flag (cannot be accessed directly, use jz, je and jnz)
	bf	Below flag (cannot be accessed directly, use jb and jbe)


Op Codes
~~~~~~~~
	All variables will be declared as 32bit signed values

Byte	Description
-----------------------------------------------------------
00	nop
01	mov	acc, <variable>
02	mov	acc, <immediate>
03	mov	<variable>, acc
04	add	acc, <variable>			; sets zf if result = 0
05	add	acc, <immediate>		; sets zf if result = 0
06	sub	acc, <variable>			; sets zf if result = 0
07	sub	acc, <immediate>		; sets zf if result = 0
08	mul	acc, <variable>			; sets zf if result = 0
09	mul	acc, <immediate>		; sets zf if result = 0
0A	div	acc, <variable>			; sets zf if result = 0
0B	div	acc, <immediate>		; sets zf if result = 0
0C	and	acc, <variable>			; sets zf if result = 0
0D	and	acc, <immediate>		; sets zf if result = 0
0E	or	acc, <variable>			; sets zf if result = 0
0F	or	acc, <immediate>		; sets zf if result = 0
10	xor	acc, <variable>			; sets zf if result = 0
11	xor	acc, <immediate>		; sets zf if result = 0
12	mov	acc, rand
13	mov	<Variable>, rand
14	call	<relative>
15	jmp	<relative>
16	cmp	<variable>, <variable>
17	cmp	<variable>, <immediate>
18	cmp	<immediate>, <variable>
19	cmp	acc, <variable>
1A	cmp	acc, <immediate>
1B	je	<relative>			; jz <relative> also equals 1B
1C	jne	<relative>			; jnz <relative> also equals 1C
1D	jb	<relative>			; jge <relative> also equals 1D
1E	jbe	<relative>			; jg <relative> also equals 1E
1F	not	acc				; inverts acc bits
20	ret					; returns from call
21	end					; ends script
22	host	<immediate>, <variable>		; sets host variable <immediate> with value from <variable>
23	host	<immediate>, <immediate>	; sets host variable <immediate> with value from <immediate>
24	host	<variable>, <immediate>		; gets host variable <immediate> into <variable>
25	host	acc, <immediate>		; gets host variable <immediate> into acc
26	host	<immediate>, acc		; sets host variable <immediate> with value from acc
27	abs	<variable>			; converts variable value to +ve amount (eg. -10 = 10, 10 = 10)
28	abs	acc				; converts acc value to +ve amount (eg. -10 = 10, 10 = 10)
29	hostr	<variable>, <immediate>		; gets readonly-host variable <immediate> into <variable>
2A	hostr	acc, <immediate>		; gets readonly-host variable <immediate> into acc


Host
~~~~
	Host variable numbers will be declared as constants in INCLUDE files, so they can be configured per
application, rather than hardcoded


Example Op Code Script
~~~~~~~~~~~~~~~~~~~~~~

Offset	Bytes			Script
-----------------------------------------------------------
000000	start:
000000	01 22 00 00 00		mov	acc, player1x		; player1x absolute address from code start
000005	04 26 00 00 00		add	acc, player1y
00000A	11 39 10 00 00		xor	acc, 1039h
00000F	1A 20 00 00 00		cmp	acc, 20h
000014	1B 06 00 00 00		je	dont_clear		; dont_clear is 6 bytes from this offset

000015	1F			xor	acc, acc

000016	dont_clear:
000016	13 26 00 00 00		mov	player1y, rand
000019  03 22 00 00 00		mov	player1x, acc
00001E	21			end

000022	00 00 00 00		player1x	var	0	; declaring variables
000026	40 00 00 00		player1y	var	40h	; with values
